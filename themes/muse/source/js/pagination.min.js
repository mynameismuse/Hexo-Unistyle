(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Pagination", [], factory);
	else if(typeof exports === 'object')
		exports["Pagination"] = factory();
	else
		root["Pagination"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	let installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		let module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		let getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(1);

let Pagination = function Pagination(param) {
  let opt = {
    el: '',
    currentPage: 1,
    pageNum: 6,
    callback: null
  };
  param = param || opt;
  for (let i in param) {
    this[i] = param[i];
  }

  if (TestAvail(this.el)) {
    if (typeof this.el === 'string') {
      this.el = document.querySelector(this.el);
    }
  } else {
    throw '请选择容器!';
  }

  if (TestAvail(this.itemClass)) {
    this.itemClass.push('Item');
  } else {
    this.itemClass = [];
    this.itemClass.push('Item');
  }

  if (this.currentPage > this.total || this.currentPage < 1) {
    this.currentPage = 1;
  }
  this.init();
};
Pagination.prototype.init = function () {
  this.creatprePage();
  this.creatList();
  this.creatNextpage();
  this.selectPage();
};
Pagination.prototype.creatprePage = function () {
  //生成上一页
  let $p = document.createElement('p'),
      that = this,
      classlist = ['prePage'],
      clasname;
  $p.innerText = '上一页';
  if (TestAvail(that.prePageClass)) {
    Array.prototype.push.apply(classlist, that.prePageClass);
    clasname = classlist.join(' ');
  }

  $p.className = clasname;
  $p.onclick = function () {
    let list = document.querySelector('.PageList'),
        li = list.querySelector('.act'),
        ind = li.getAttribute('number') - 0,
        val = li.innerText - 0 - 1;
    if (val <= 1) {
      val = 1;
    }
    if (val >= that.pageNum2 - 1 && that.total > that.pageNum) {
      that.adaptPage(val, ind);
    } else {
      that.adaptPage(val);
    }
  };
  this.el.appendChild($p);
};
Pagination.prototype.creatNextpage = function () {
  //生成下一页
  let $p = document.createElement('p'),
      that = this,
      clas = ['nextPage'],
      clasname;
  $p.innerText = '下一页';
  if (TestAvail(that.nextPageclass)) {
    Array.prototype.push.apply(clas, that.nextPageclass);
    clasname = clas.join(' ');
  }

  $p.className = clasname;
  $p.onclick = function () {
    let list = document.querySelector('.PageList'),
        li = list.querySelector('.act'),
        ind = li.getAttribute('number') - 0,
        val = li.innerText - 0 + 1;
    if (val >= that.total) {
      val = that.total;
    }
    if (val > that.pageNum - 1 && that.pageNum2 - 1 && that.total > that.pageNum) {
      that.adaptPage(val, ind);
    } else {
      that.adaptPage(val);
    }
  };
  this.el.appendChild($p);
};
Pagination.prototype.creatList = function () {
  //生成下一页
  let that = this,
      pagenum = that.pageNum >= that.total ? that.total : that.pageNum,
      ismore = that.pageNum >= that.total ? false : true,
      current = that.currentPage,
      itemclas = that.itemClass.join(' '),
      $ul = document.createElement('ul');
  $ul.className = 'PageList';
  this.pageNum2 = pagenum;
  that.el.appendChild($ul);
  if (!ismore) {
    for (let i = 0; i < pagenum; i++) {
      let $li = document.createElement('li');
      $li.innerText = i + 1;
      $li.className = itemclas;
      $li.setAttribute('type', 'page');
      $li.setAttribute('number', i);
      if (current === i + 1) {
        addClass($li, that.pageTogleClass);
      }
      $ul.appendChild($li);
    }
  } else {
    for (let i = 0; i < pagenum; i++) {
      let $li = document.createElement('li');
      $li.setAttribute('type', 'page');
      $li.className = itemclas;
      $li.setAttribute('number', i);
      if (i === 0) {
        $li.innerText = 1;
      } else if (i === pagenum - 1) {
        $li.innerText = that.total;
      }
      $ul.appendChild($li);
    }
    this.adaptPage(that.currentPage);
  }
  $ul.onclick = function (event) {
    event = event ? event : window.event;
    let target = event.srcElement ? event.srcElement : event.target,
        type = target.getAttribute('type'),
        ind,
        ul = document.querySelector('.PageList'),
        $li = ul.querySelectorAll('li[type=\'page\']'),
        currentPage = target.innerText - 0;

    if (type != 'page') return false;
    ind = target.getAttribute('number') - 0;
    if (currentPage >= that.pageNum2 - 1) {
      that.adaptPage(currentPage, ind);
    } else {
      that.adaptPage(currentPage);
    }
  };
};
Pagination.prototype.selectPage = function (currentPage, ind) {
  let totalinfo = document.createElement('p'),
      that = this,
      $spanarr;
  totalinfo.className = 'SelectPage';
  that.el.appendChild(totalinfo);
  for (let i = 0; i <= 2; i++) {
    let $li = document.createElement('span');
    if (i === 0) {
      $li.innerText = '共' + that.total + '页';
    } else if (i === 1) {
      let $input = document.createElement('input'),
          $ip = document.createElement('i'),
          $ia = document.createElement('i');
      $ip.innerText = '跳转';
      $ia.innerText = '页';
      // $input.setAttribute('type','number');
      $input.setAttribute('id', 'pageInput');
      $input.onkeyup = function (event) {
        let e = event || window.event || arguments.callee.caller.arguments[0],
            char,
            self = this,
            Input = self.value,
            $List = document.querySelector('.PageList'),
            $li = $List.querySelectorAll('li[type=\'page\']'),
            regex = /^[1-9]\d*$/,
            flag = regex.test(Input),
            current = that.total > Input - 0 ? Input - 0 : that.total,
            Ind = that.total > Input - 0 ? $li.length - 2 : $li.length - 1;
        if (Input - 0 <= $li.length - 1) {
          Ind = Input - 0;
        }
        if (e.which) {
          char = e.which;
        } else {
          char = e.keyCode;
        }
        if (char === 13) {
          if (flag) {
            if (current >= that.pageNum2 - 1 && that.total > that.pageNum) {
              that.adaptPage(current, Ind);
            } else {
              that.adaptPage(current);
            }
          }

          document.querySelector('#pageInput').value = '';
        }
      };
      $li.appendChild($ip);
      $li.appendChild($input);
      $li.appendChild($ia);
    } else {
      $li.innerText = 'GO';
      $li.className = 'turnPage';
      $li.onclick = function () {
        let Input = document.querySelector('#pageInput').value,
            $List = document.querySelector('.PageList'),
            $li = $List.querySelectorAll('li[type=\'page\']'),
            regex = /^[1-9]\d*$/,
            flag = regex.test(Input),
            current = that.total > Input - 0 ? Input - 0 : that.total,
            Ind = that.total > Input - 0 ? $li.length - 2 : $li.length - 1;
        if (Input - 0 <= $li.length - 1) {
          Ind = Input - 0;
        }
        if (flag) {
          if (current >= that.pageNum2 - 1 && that.total > that.pageNum) {
            that.adaptPage(current, Ind);
          } else {
            that.adaptPage(current);
          }
        }

        document.querySelector('#pageInput').value = '';
      };
    }
    totalinfo.appendChild($li);
  }
};
Pagination.prototype.adaptPage = function (currentPage, ind) {
  let Pagelist = document.querySelector('.PageList'),
      page = Pagelist.querySelectorAll('li[type=\'page\']'),
      expend = Pagelist.querySelectorAll('li[type=\'expend\']'),
      that = this;
  for (let i = 0; i < expend.length; i++) {
    Pagelist.removeChild(expend[i]);
  }

  if (currentPage <= that.pageNum) {
    if (typeof ind != 'undefined') {
      if (ind != page.length - 2) {
        for (let i = page.length - 2; i >= 1; i--) {
          page[i].innerText = currentPage + i - page.length + 3;
        }

        for (let i = 0; i < 2; i++) {
          let $li = document.createElement('li');
          $li.innerText = '...';
          $li.setAttribute('type', 'expend');
          if (currentPage - page.length + 4 > 2 && i === 0) {
            Pagelist.insertBefore($li, page[1]);
          } else if (currentPage + 2 < that.total && i === 1) {
            Pagelist.insertBefore($li, page[page.length - 1]);
          }
        }
      } else {
        for (let i = page.length - 2; i >= 1; i--) {
          page[i].innerText = currentPage + i - page.length + 3;
        }

        for (let i = 0; i < 2; i++) {
          let $li = document.createElement('li');
          $li.innerText = '...';
          $li.setAttribute('type', 'expend');
          if (i === 0) {
            Pagelist.insertBefore($li, page[1]);
          } else if (currentPage + 2 < that.total) {
            Pagelist.insertBefore($li, page[page.length - 1]);
          }
        }
      }
    } else {
      for (let i = 1; i < page.length - 1; i++) {
        page[i].innerText = i + 1;
      }

      if (page[page.length - 2].innerText - 0 + 1 < that.total) {
        let $li = document.createElement('li');
        $li.innerText = '...';
        $li.setAttribute('type', 'expend');
        Pagelist.insertBefore($li, page[page.length - 1]);
      }
    }
  } else if (currentPage >= that.total - 1) {
    //1个expend current>total-1
    for (let i = 1; i <= page.length - 1; i++) {
      page[i].innerText = that.total - page.length + i + 1;
    }

    let $li = document.createElement('li');
    $li.innerText = '...';
    $li.setAttribute('type', 'expend');
    Pagelist.insertBefore($li, page[1]);
  } else {
    // 两个expend current>3&&<total-1
    for (let _i = page.length - 2; _i >= 1; _i--) {
      page[_i].innerText = currentPage + _i - page.length + 3;
    }

    for (let _i2 = 0; _i2 < 2; _i2++) {
      let _$li = document.createElement('li');
      _$li.innerText = '...';
      _$li.setAttribute('type', 'expend');
      if (_i2 === 0) {
        Pagelist.insertBefore(_$li, page[1]);
      } else if (currentPage + 2 < that.total) {
        Pagelist.insertBefore(_$li, page[page.length - 1]);
      }
    }
  }

  for (let _i3 = 0; _i3 < page.length; _i3++) {
    let val = page[_i3].innerText - 0;
    if (val !== currentPage) {
      removeClass(page[_i3], 'act');
    } else {
      addClass(page[_i3], 'act');
    }
  }
  that.callback(currentPage);
};

function TestAvail(param) {
  if (typeof param !== 'undefined' && param !== '' && param !== null) {
    return true;
  } else {
    return false;
  }
}

function addClass(obj, cls) {
  if (!hasClass(obj, cls)) {
    obj.className += ' ' + cls;
  }
}

function removeClass(obj, cls) {
  if (hasClass(obj, cls)) {
    let reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
    obj.className = obj.className.replace(reg, ' ');
  }
}

function toggleClass(obj, cls) {
  if (hasClass(obj, cls)) {
    removeClass(obj, cls);
  } else {
    addClass(obj, cls);
  }
}

function hasClass(obj, cls) {
  let claName = obj.className,
      arr1 = claName.split(' '),
      result = false;
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i].indexOf('act') !== -1) {
      result = true;
    }
  }
  return result;
}

module.exports = Pagination;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);
});